'''Введение в функции. Позиционные и именнованные args kwargs аргументы по default. Аннотации.'''
'''Анннотация - помогает сделать код информативным и избавиться от некоторых проблем  с динамической типизацией'''
# a = 7
# b = 'hello'
# b = 3

# num: int = 9
# print(num)
# num = 'hello'
# print(num)

'''Функции'''
# функция - именованный блок кода, который выполняет одну задачу и может принимать аргументы и возвращать результат. Можно использовать многократно вызывая по имени

# def <название функции(параметры):
#     <тело функции>

# def my_len(obj):
#     count = 0
#     for element in obj:
#         count += 1
#     print(count)
# my_len('hello')

# функции нужны чтобы код не повторялся и был универсальным ( принцип dry)
# DRY - (don't repeat yourself)

'''return'''
# испоьзовать для возвращение результата и на этом моменте наша функция завершает работу

# def makers():
#     return 'Makers'
#     print(6) никогда не отработает

# print(makers())

'''Параметры и Аргументы'''
# параметры - локальные переменные внутри фуекции значение которые мы задаем при вызове функциии
# Аргументы - значения которые мы передаем параметрам при вызове функции
# print('аргумент')

'''Виды параметров'''
# 1. обязаиельные (obj , a, b, name, last_name) - определяют какие аргументы передавать функции. При этом нужно передовать аргументов ровно столько, сколько параметров
# 2. не обязательные (параметры со эначением по умолчанию а=8)
# 2.1  c дефолтым
# 2.2 args, kwargs = args(не именованные аргументы) (все позиционные аргументы, которые не попали в обязательные и с дефолтом)
# kwargs - принимает именованные аргументы (все лишние именованные аргументы)

'''Виды аргументов'''
# 1. позиционные (по позиции)
'John', 'Snow'
# def a(c, b):
#     pass
# a ('John', 'Snow')
# 2. именованные аргументы (по названию(параметр=2))
# def a(c, b):
#     pass
# a(b='John', c='Snow')

# args - tuple, в котором нам приходят все аргументы которые были переданы через запятую(кроме обязательных и с дефолтом)
# kwargs - dict, в котором нам приходят все аршументы которые переданы ввиде ключа=значения (кроме именованных)

# def add(b: int, a: int=2):
#     ress = a + b
#     print(ress)

# add(9)
# add(9, 6) - позиционные аргументы
# add(a=8, b=12) - именованные аргументы(порядок не имеет значения)

'''распаковка'''
# list1 = [*range(2, 22)]
# print(list)

# dict_ ={'a': 1, 'b': 2, 'c': 3}
# dict1 = {**dict_}
# print(dict1)

# def func(a, b=5, *args, **kwargs):
#     print('a - ', a)
#     print('b - ', b)
#     print('args - ', args)
#     print('kwargs - ', kwargs)

# func(56, 53, [1, 2, 3], 'makers', hello='hello')

# def count_factorial(num: int) -> int:
# #     def count_factorial(n):
# #         if n == 0:
# #             return 1
# #         return count_factorial(n-1) * n
# # print(count_factorial(5))
#      fact = 1
#      for i in range(2, num+1):
#          fact *= i

#      return fact

# print(count_factorial(4))

from random import sample 
list1=sample(range(0,50),k=5) 
list2=sample(range(0,50),k=5) 
print(sum(list1+list2))
